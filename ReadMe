# Fast Chat Interface

A streamlined, high-performance chat interface implementation built with Next.js, Drizzle ORM, and SQLite. This project demonstrates efficient AI streaming capabilities with multi-model support.

## ⚠️ Disclaimer

**This is a mock implementation for demonstration purposes only.** It is not production-ready and lacks proper security measures. Do not use in production environments or with sensitive data.

## Features

- **Multi-Model Support**: Integrates with various AI providers including:
  - OpenAI
  - Claude (Anthropic)
  - Gemini (Google)
  - DeepSeek (via Azure and Groq)

- **Real-Time Streaming**: Optimized for fast, low-latency streaming responses

- **Keystroke Analysis**: Monitors typing patterns to enhance user experience

- **Automatic Language Switching**: Dynamically adjusts to the user's language

- **Dynamic Model Routing**: Intelligently selects the appropriate model based on query characteristics

- **Authentication System**: Basic auth flow implementation (login and session management)

- **Modern UI Components**: Comprehensive set of UI components using a component library

## Technical Stack

- **Frontend**: Next.js 
- **Database**: SQLite with Drizzle ORM
- **AI Integration**: Multiple provider APIs with connection pooling
- **Authentication**: Custom authentication system

## Project Structure

- `app/`: Next.js application routes and pages
  - `(auth)/`: Authentication-related pages
  - `api/`: Backend API routes for auth, chat, and connections
  - `chats/`: Chat interface pages

- `components/`: Reusable UI components
  - `ui/`: Base UI component library
  - Chat-specific components

- `lib/`: Core functionality
  - `ai/`: AI providers, connection management, and model routing
  - Authentication, database, and utility functions

## Getting Started

1. Clone this repository
2. Install dependencies: `npm install`
3. Set up environment variables (see `.env.example`)
4. Run the development server: `npm run dev`

## Development Focus

This project prioritizes:

- Performance optimization for streaming responses
- Flexible architecture for multiple AI providers
- Demonstrating keystroke analysis techniques
- Efficient connection pooling and management

## Limitations

- Not production-ready
- Limited security implementation
- Mock authentication
- Minimal error handling

## License

[MIT License](LICENSE)
